{"version":3,"sources":["app.js","auth/signin.js","auth/singup.js","auth/userlinks.js","featured/featured.js","featured/play.js","bytes/bytes.js","bytes/leaderboard.js","suggestion/suggestion.js","authinterceptor.js","bytes.service.js","currentuser.js","sessiontoken.js","users.service.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":["(()=>{\r\n\tvar app=angular.module('twitchproject',[\r\n\t\t'ui.router',\r\n\t\t'twitchproject.auth.signin',\r\n\t\t'twitchproject.auth.signup',\r\n\t\t'twitchproject.sug',\r\n\t\t'twitchproject.leader',\r\n\t\t'twitchproject.byte'\r\n\t]);\r\n\tfunction config($urlRouterProvider){\r\n\t\t$urlRouterProvider.otherwise('/signin');\r\n\t}\r\n\tconfig.$inject=['$urlRouterProvider'];\r\n\tapp.config(config);\r\n\tapp.constant('API_BASE',location.hostname===\"localhost\"?'//localhost:3000/api/':'');\r\n})();","(()=>{\r\n\tangular\r\n\t\t.module('twitchproject.auth.signin',['ui.router'])\r\n\t\t.config(signinConfig);\r\n\tfunction signinConfig($stateProvider) {\r\n\t\t$stateProvider\r\n\t\t\t.state('signin',{\r\n\t\t\t\turl:'/signin',\r\n\t\t\t\ttemplateUrl:'/components/auth/signin.html',\r\n\t\t\t\tcontroller:SigninController,\r\n\t\t\t\tcontrollerAs:'ctrl',\r\n\t\t\t\tbindToController:this\r\n\t\t\t});\r\n\t}\r\n\tsigninConfig.$inject=['$stateProvider'];\r\n\tfunction SigninController($state,UsersService){\r\n\t\tthis.user={};\r\n\t\tthis.login=()=>{\r\n\t\t\tUsersService.login(this.user).then(res=>{\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n\tSigninController.$inject=['$state','UsersService'];\t\r\n})();\r\n","\r\n(()=>{\r\n\tangular\r\n\t\t.module('twitchproject.auth.signup',['ui.router'])\r\n\t\t.config(signupConfig);\r\n\t\tfunction signupConfig($stateProvider){\r\n\t\t\t$stateProvider\r\n\t\t\t.state('signup',{\r\n\t\t\t\turl:'/signup',\r\n\t\t\t\ttemplateUrl:'/components/auth/signup.html',\r\n\t\t\t\tcontroller:SignUpController,\r\n\t\t\t\tcontrollerAs:'ctrl',\r\n\t\t\t\tbindToController:this\r\n\t\t\t});\r\n\t\t}\r\n\t\tsignupConfig.$inject=['$stateProvider'];\r\n\t\tfunction SignUpController($state,UsersService){\r\n\t\t\tvar vm=this\r\n\t\t\tvm.user={};\r\n\t\t\tvm.message=\"Sign up for an account!\";\r\n\t\t\tvm.submit=function(){\r\n\t\t\t\tconsole.log(vm.user);\r\n\t\t\t\tUsersService.create(vm.user).then(function(res){\r\n\t\t\t\t\tconsole.log(res);\r\n\t\t\t\t});\r\n\t\t\t};\r\n\t\t}\r\n\t\tSignUpController.$inject=['$state','UsersService'];\r\n})();","(()=>{\r\n\tangular.module('twitchproject')\r\n\t.directive('userlinks',function(){\r\n\t\tUserLinksController.$inject=['$state','CU','SessionToken'];\r\n\t\tfunction UserLinksController($state,CU,SessionToken) {\r\n\t\t\tthis.user=()=>CU.get()||{};\r\n\t\t\tthis.signedIn=()=>!!(this.user()._id||false);\r\n\t\t\tthis.logout=()=>{\r\n\t\t\t\tCU.clear();\r\n\t\t\t\tSessionToken.clear();\r\n\t\t\t\t$state.go('signin');\r\n\t\t\t}\r\n\t\t\tthis.isLinked=()=>!!(this.user().twitchId||false);\r\n\t\t}\r\n\t\treturn{\r\n\t\t\tscope:{},\r\n\t\t\tcontroller:UserLinksController,\r\n\t\t\tcontrollerAs:'ctrl',\r\n\t\t\tbindToController:true,\r\n\t\t\ttemplateUrl:'/components/auth/userlinks.html'\r\n\t\t}\r\n\t})\r\n})();","(()=>{\r\n    angular\r\n        .module('twitchproject.feat',['ui.router'])\r\n        .config(featConfig);\r\n    function featConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('feat',{\r\n                url:'/featured',\r\n                templateUrl:'/components/featured/featured.html',\r\n                controller:FeaturedController,\r\n                controllerAs:'ctrl',\r\n                bindToController:this\r\n            });\r\n    };\r\n    featConfig.$inject=['$stateProvider'];\r\n    function FeaturedController($state,$http,API_BASE,$sce) {\r\n        this.feat=undefined;\r\n        $http.get(API_BASE+'/featured').then(res=>{\r\n            this.feat=res.data;\r\n            this.feat.forEach((clip,i)=>{\r\n                this.feat[i].img=$sce.trustAsResourceUrl(clip.img);\r\n            });\r\n        });\r\n    }\r\n    FeaturedController.$inject=['$state','$http','API_BASE','$sce'];\r\n})();","","(()=>{\r\n    angular\r\n        .module('twitchproject.byte',['ui.router'])\r\n        .config(byteConfig);\r\n    function byteConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('byte',{\r\n                url:'/bytes',\r\n                templateUrl:'/components/bytes/bytes.html',\r\n                controller:ByteController,\r\n                controllerAs:'ctrl',\r\n                bindToController:this\r\n            });\r\n    };\r\n    byteConfig.$inject=['$stateProvider'];\r\n    function ByteController($state,BytesService,CU,$http,API_BASE){\r\n        this.signedIn=()=>CU.isSignedIn();\r\n        this.transfer=function(){\r\n            var to = prompt(\"Who would you like to transfer to too?\",CU.get().username);\r\n            $http.get(API_BASE+\"verify/\"+to).then(res=>{\r\n                if(res.data){\r\n                    var num= eval(prompt(\"How much?\",\"0\"));\r\n                    BytesService.transfer(to,num);\r\n                }\r\n                else\r\n                    alert(\"that person does not exist\"); \r\n            }).catch(err=>console.log(err));\r\n        };\r\n        this.Dump=()=>{\r\n            $http.delete(API_BASE+'dump/');\r\n        };\r\n        this.randomTransfer=()=>{\r\n            BytesService.giveRandom(prompt(\"How much would you like to give?\",\"0\"));\r\n        };\r\n    }\r\n    ByteController.$inject=['$state','BytesService','CU','$http','API_BASE']\r\n})();","(()=>{\r\n    angular\r\n    .module('twitchproject.leader',['ui.router'])\r\n    .config(leaderConfig);\r\n    function leaderConfig($stateProvider){\r\n        $stateProvider\r\n            .state('leaderboard',{\r\n                url:'/leaderboard',\r\n                template:'<leaderboard count=\"1\"/>'\r\n            });\r\n    };\r\n    angular.module('twitchproject')\r\n    .directive('leaderboard',function(){\r\n        LeaderBoardController.$inject=['$scope','$state','CU','BytesService'];\r\n        function LeaderBoardController($scope,$state,CU,BytesService){\r\n            console.log($scope)\r\n            this.leaders=undefined;\r\n            BytesService.getTop($scope.count||10).then(res=>this.leaders=res.data);\r\n            this.format=bytes=>{\r\n                if(bytes/1000000000)\r\n                    return \"%.2fB\".format(bytes/1000000000);\r\n                if(bytes/1000000)\r\n                    return \"%.2fM\".format(bytes/1000000);\r\n                if(bytes/1000)\r\n                    return \"%.2fK\".format(bytes/1000);\r\n                return bytes;\r\n            }\r\n        };\r\n        return{\r\n            scope:{\r\n                count:'='\r\n            },\r\n            controller:LeaderBoardController,\r\n            controllerAs:'ctrl',\r\n            bindToController:true,\r\n            templateUrl:'/components/bytes/leaderboard.html'\r\n        }\r\n    });\r\n})();","(()=>{\r\n    angular\r\n        .module('twitchproject.sug',['ui.router'])\r\n        .config(SuggestionConfig);\r\n    function SuggestionConfig($stateProvider) {\r\n        $stateProvider\r\n            .state('suggestion',{\r\n                url:'/suggestion',\r\n                templateUrl:'/components/suggestion/suggestion.html',\r\n                controller:SuggestionController,\r\n                controllerAs:'ctrl',\r\n                bindToController:this\r\n            })\r\n            .state('suggestions',{\r\n                url:'/suggestions',\r\n                templateUrl:'/components/suggestion/suggestions.html',\r\n                controller:SuggestionsController,\r\n                controllerAs:'ctrl',\r\n                bindToController:this\r\n            });\r\n    }\r\n    SuggestionConfig.$inject=['$stateProvider'];\r\n    function SuggestionController($state,$http,API_BASE) {\r\n        this.submit=()=>{\r\n            $http.post(API_BASE+'suggestions',{sug:this.sug})\r\n            .then((res)=>{\r\n                if(res.data)\r\n                    $state.go('suggestions')\r\n            })\r\n        }\r\n    }\r\n    SuggestionController.$inject=['$state','$http','API_BASE'];\r\n    function SuggestionsController($state,$http,API_BASE) {\r\n        this.delete=(sug,i)=>{\r\n            $http.delete(API_BASE+'suggestions/'+sug)\r\n            .then(res=>{\r\n                if(res.data)\r\n                    this.suggestions.splice(i,1);\r\n            })\r\n            .catch(err=>console.log(err));\r\n        }\r\n        this.suggestions=[];\r\n        $http.get(API_BASE+'suggestions').then(res=>this.suggestions=res.data);\r\n    }\r\n    SuggestionsController.$inject=['$state','$http','API_BASE'];\r\n})();","(()=>{\r\n\tangular.module('twitchproject')\r\n\t\t.factory('AuthInterceptor',['SessionToken','API_BASE',\r\n\t\t\tfunction(SessionToken,API_BASE){\r\n\t\t\t\treturn {\r\n\t\t\t\t\trequest:function(config){\r\n\t\t\t\t\t\tvar token=SessionToken.get();\r\n\t\t\t\t\t\tif(token&&config.url.indexOf(API_BASE)>-1){\r\n\t\t\t\t\t\t\tconfig.headers['Authorization']=token;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn config\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t]);\r\n\tangular.module('twitchproject')\r\n\t\t.config(['$httpProvider',function($httpProvider){\r\n\t\t\treturn $httpProvider.interceptors.push('AuthInterceptor')\r\n\t\t}]);\r\n})();","(function () {\r\n    angular.module('twitchproject')\r\n        .service('BytesService', [\r\n            '$http', 'API_BASE', 'SessionToken', 'CU',\r\n            function ($http, API_BASE, SessionToken, CU) {\r\n                function BytesService() {\r\n\r\n                }\r\n                BytesService.prototype.getTop = function (amount) {\r\n                    console.log(amount)\r\n                    return $http.get(API_BASE + 'top/' + eval(amount)).catch(function (err) {\r\n                        console.log(err);\r\n\r\n                    });\r\n                };\r\n                BytesService.prototype.transfer = function (transfer, amount) {\r\n                    if (!CU.isSignedIn() )\r\n                        throw \"NEEDS TO BE \" + CU.isSignedIn() ? \"linked to twitch\" : \"signed in\";\r\n                    else\r\n                        return $http.put(API_BASE + 'transfer/'+transfer,{amount:amount})\r\n                };\r\n                BytesService.prototype.giveRandom = function (amt) {\r\n                    if (!CU.isSignedIn() )\r\n                        throw \"NEEDS TO BE \" + CU.isSignedIn() ? \"linked to twitch\" : \"signed in\";\r\n                    else\r\n                        return $http.put(API_BASE + 'rando/'+amt)\r\n                            .catch(function () {\r\n\r\n                            });\r\n                };\r\n                return new BytesService();\r\n            }\r\n        ])\r\n})();","(function(){\r\n\tangular.module('twitchproject')\r\n\t\t.service('CU',['$window',function($window){\r\n\t\t\tfunction CurrentUser(){\r\n\t\t\t\tvar cu=$window.localStorage.getItem('currentUser');\r\n\t\t\t\tif(cu&&cu!=='undefined')this.cu=JSON.parse($window.localStorage.getItem('currentUser'));\r\n\t\t\t}\r\n\t\t\tCurrentUser.prototype.set = function(user) {\r\n\t\t\t\tthis.cu=user;\r\n\t\t\t\t$window.localStorage.setItem('currentUser',JSON.stringify(user));\r\n\t\t\t};\r\n\t\t\tCurrentUser.prototype.get = function() {\r\n\t\t\t\treturn this.cu||{};\r\n\t\t\t};\r\n\t\t\tCurrentUser.prototype.clear = function() {\r\n\t\t\t\tthis.cu=undefined;\r\n\t\t\t\t$window.localStorage.removeItem('currentUser');\r\n\t\t\t};\r\n\t\t\tCurrentUser.prototype.isSignedIn = function() {\r\n\t\t\t\treturn !!this.get()._id;\r\n\t\t\t};\r\n\t\t\treturn new CurrentUser();\r\n\t\t}]);\r\n})();","(function(){\r\n\tangular.module('twitchproject')\r\n\t\t.service('SessionToken',['$window',function($window){\r\n\t\t\tfunction SessionToken(){\r\n\t\t\t\tthis.sessionToken=$window.localStorage.getItem('sessionToken');\r\n\t\t\t}\r\n\t\t\tSessionToken.prototype.set = function(token) {\r\n\t\t\t\tthis.sessionToken=token;\r\n\t\t\t\t$window.localStorage.setItem('sessionToken',token);\r\n\t\t\t};\r\n\t\t\tSessionToken.prototype.get = function() {\r\n\t\t\t\treturn this.sessionToken;\r\n\t\t\t};\r\n\t\t\tSessionToken.prototype.clear = function() {\r\n\t\t\t\tthis.sessionToken=undefined;\r\n\t\t\t\t$window.localStorage.removeItem('sessionToken');\r\n\t\t\t};\r\n\t\t\treturn new SessionToken();\r\n\t\t}]);\r\n})();","(function(){\r\n\tangular.module('twitchproject')\r\n\t\t.service('UsersService',[\r\n\t\t\t'$http','API_BASE','SessionToken','CU',\r\n\t\t\tfunction($http,API_BASE,SessionToken,CU){\r\n\t\t\t\tfunction UsersService(){\r\n\r\n\t\t\t\t}\r\n\t\t\t\tUsersService.prototype.create = function(user) {\r\n\t\t\t\t\tvar userPromise=$http.post(API_BASE+'signup',{\r\n\t\t\t\t\t\tuser:user\r\n\t\t\t\t\t});\r\n\t\t\t\t\tuserPromise.then(function(res){\r\n\t\t\t\t\t\tSessionToken.set(res.data.sessionToken);\r\n\t\t\t\t\t\tCU.set(res.data.user);\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn userPromise;\r\n\t\t\t\t};\r\n\t\t\t\tUsersService.prototype.login = function(user) {\r\n\t\t\t\t\tvar loginPromise=$http.post(API_BASE+'login',{\r\n\t\t\t\t\t\tuser:user\r\n\t\t\t\t\t});\r\n\t\t\t\t\tloginPromise.then(function(res){\r\n\t\t\t\t\t\tSessionToken.set(res.data.token);\r\n\t\t\t\t\t\tCU.set(res.data.user);\r\n\t\t\t\t\t}).catch(err=>console.log(err));\r\n\t\t\t\t\treturn loginPromise;\r\n\t\t\t\t};\r\n\t\t\t\tUsersService.prototype.link = function() {\r\n\t\t\t\t};\r\n\t\t\t\treturn new UsersService();\r\n\t\t\t}\r\n\t\t]);\r\n})();"]}